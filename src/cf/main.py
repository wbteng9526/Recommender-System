import numpy as np
import matplotlib.pyplot as plt
from data_loader import load_data
from model import rmse, predict, top_k_similarity, weighted_similarity, get_similarity
from evaluation import visualization, plot_criterion

TEST_RATIO = 0.3
K_RANGE = list(range(1,200,5))
ALPHA_RANGE = [10,50,100,150,200,400,800]
THRES_RANGE = [0.01] + np.arange(0.05,2.6,0.05).tolist()

def main():
    train_data_matrix, test_data_matrix = load_data(TEST_RATIO)
    print('done!')
    print('')
    print('Original User Collaborative Filtering Result: ')
    similarity = get_similarity(train_data_matrix, sim_type = 'cosine', cf_type = 'user')
    prediction = predict(train_data_matrix, similarity, cf_type = 'user')
    print('User-CF RMSE: %.4f' % rmse(prediction,test_data_matrix))
    print('')
    print('')
    print('Only count similairity of top k users: ')
    print('k equals to 20 initially')
    similarity_k = top_k_similarity(train_data_matrix, 20)
    prediction_k = predict(train_data_matrix, similarity_k, cf_type = 'user')
    print('User-CF RMSE: %.4f' % rmse(prediction_k,test_data_matrix))
    print('')
    print('Loop through a series of k values: [1,51,101,...,901]:')
    print('Visualizing RMSE...')
    min_k_rmse = visualization(train_data_matrix, test_data_matrix, top_k_similarity, K_RANGE)
    plt.show()
    print('K value that brings the least RMSE is', K_RANGE[min_k_rmse])
    similarity_k = top_k_similarity(train_data_matrix, k=K_RANGE[min_k_rmse])
    prediction_k = predict(train_data_matrix, similarity_k, cf_type = 'user')
    print('')
    print('')
    print('Give similarity some weights by dividing number of both-rated items:')
    print('alpha equals to 50 initially')
    similarity_weighted = weighted_similarity(train_data_matrix,sim_type = 'correlation',alpha=50)
    prediction_weighted = predict(train_data_matrix, similarity_weighted, cf_type = 'user')
    print('User-CF RMSE: %.4f' % rmse(prediction_weighted,test_data_matrix))
    print('')
    print('Loop through a series of alpha values: [10,50,100,150,200,400,800]:')
    print('Visualizing RMSE...')
    min_weighted_rmse = visualization(train_data_matrix,test_data_matrix,weighted_similarity,ALPHA_RANGE)
    plt.show()
    print('Alpha value that brings the least RMSE is', ALPHA_RANGE[min_weighted_rmse])
    similarity_weighted = weighted_similarity(train_data_matrix,sim_type = 'correlation',alpha = ALPHA_RANGE[min_weighted_rmse])
    prediction_weighted = predict(train_data_matrix, similarity_weighted, cf_type = 'user')
    print('')
    print('')
    print('Plot P-R and ROC curves for original collaborative filtering')
    plt.figure(figsize = (12,6))
    plt.subplot(1,2,1)
    plot_criterion(prediction,test_data_matrix,THRES_RANGE,plot_type = 'PR')
    plt.subplot(1,2,2)
    plot_criterion(prediction,test_data_matrix,THRES_RANGE,plot_type = 'ROC')
    plt.show()
    print('Plot P-R and ROC curves for most optimal top k users')
    plt.figure(figsize = (12,6))
    plt.subplot(1,2,1)
    plot_criterion(prediction_k,test_data_matrix,THRES_RANGE,plot_type = 'PR')
    plt.subplot(1,2,2)
    plot_criterion(prediction_k,test_data_matrix,THRES_RANGE,plot_type = 'ROC')
    plt.show()
    print('Plot P-R and ROC curves for most optimal top alpha')
    plt.figure(figsize = (12,6))
    plt.subplot(1,2,1)
    plot_criterion(prediction_weighted,test_data_matrix,THRES_RANGE,plot_type = 'PR')
    plt.subplot(1,2,2)
    plot_criterion(prediction_weighted,test_data_matrix,THRES_RANGE,plot_type = 'ROC')
    plt.show()
    print('')
    print('done!')

if __name__ == '__main__':
    main()